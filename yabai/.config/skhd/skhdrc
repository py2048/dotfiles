#!/usr/bin/env skhd -r
# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
# alt - h : yabai -m window --focus west

# swap managed window
# shift + alt - h : yabai -m window --swap north

# move managed window
# shift + cmd - h : yabai -m window --warp east

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float;\
#           yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip

:: default
:: command
:: swap
:: app @ : ~/.config/skhd/launcher/app_menu_list.sh &
:: parallels

meh - z; swap 
swap < escape; default
swap < meh - z; default

swap < h: yabai -m window --swap west && skhd -k 'escape'
swap < l: yabai -m window --swap east && skhd -k 'escape'
swap < j: yabai -m window --swap south && skhd -k 'escape'
swap < k: yabai -m window --swap north && skhd -k 'escape'

meh - a; app
app < meh - a; default
app < escape: ps -ex | grep app_menu_list.sh | grep -v grep | awk '{print $1}' | head -1 | xargs pkill -P && skhd -k 'meh -a'
parallels < meh - a; default
parallels < escape: ps -ex | grep app_menu_list.sh | grep -v grep | awk '{print $1}' | head -1 | xargs pkill -P && skhd -k 'meh -a'

# app < escape: killall
app < b: open "/Applications/Brave Browser.app" && skhd -k 'escape'
app < c: open "/Applications/Visual Studio Code.app" && skhd -k 'escape'
app < t: open "/Applications/Microsoft Teams.app" && skhd -k 'escape'
app < o: open "/Applications/Obsidian.app" && skhd -k 'escape'
app < s: open "/System/Applications/System Preferences.app" && skhd -k 'escape'
app < k: open "/Applications/KeePassXC.app" && skhd -k 'escape'
app < m: open "/Applications/Messenger.app" && skhd -k 'escape'
app < d: open "/Applications/Discord.app" && skhd -k 'escape'
app < s: open "/Applications/VMware Fusion.app" && skhd -k 'escape'

# app < p: ~/.local/bin/parallels.sh && skhd -k 'escape'
app < p; parallels
parallels < w: ~/.local/bin/parallels.sh "Windows 10" ** skhd -k 'escape'

# meh - return: /usr/local/bin/zsh -c "/usr/local/bin/kitty @ launch --type=os-window"
# meh - return: cd && /usr/local/bin/kitty &
# meh - return: /usr/local/bin/zsh -c "kitty" &
meh - return: /usr/local/bin/zsh -c " cd ~ && [ -S $TMPDIR/mykitty ] && kitty @ --to unix:$TMPDIR/mykitty launch --type=os-window || kitty --listen-on unix:$TMPDIR/mykitty" &
meh - d: /Applications/GoldenDict.app/Contents/MacOS/GoldenDict &
meh - s: /usr/bin/osascript ~/.local/bin/sidecar.scpt &
# lalt - enter: open ~
lctrl + alt + cmd - space: ~/.local/bin/app_menu.sh &
meh - e: /usr/bin/osascript ~/.local/bin/Finder.scpt &
meh - a: ~/.config/skhd/launcher/menu.sh ~/.config/skhd/launcher/app.sh &
# meh - a: ~/.config/skhd/launcher/menu.sh &

meh - h: yabai -m window --focus west || yabai -m display --focus next
meh - l: yabai -m window --focus east || yabai -m display --focus prev
meh - j: yabai -m window --focus south
meh - k: yabai -m window --focus north

meh - o: yabai -m display --focus prev
meh - y: yabai -m display --focus next

# meh - m: yabai -m space --focus next
# meh - n: yabai -m space --focus prev
meh - i: skhd --key "ctrl - right"
meh - u: skhd --key "ctrl - left"
meh - b: /System/Applications/Mission\ Control.app/Contents/MacOS/Mission\ Control
meh - a: /System/Applications/Launchpad.app/Contents/MacOS/Launchpad
meh - 1: yabai -m space --focus 1
meh - 2: yabai -m space --focus 2
meh - 3: yabai -m space --focus 3
meh - 4: yabai -m space --focus 4
meh - 5: yabai -m space --focus 5
meh - 6: yabai -m space --focus 6
meh - 7: yabai -m space --focus 7

meh - f: yabai -m window --focus mouse && yabai -m window --toggle zoom-fullscreen
meh - g: yabai -m window --toggle float

hyper - h: yabai -m window --swap west
hyper - l: yabai -m window --swap east
hyper - j: yabai -m window --swap south
hyper - k: yabai -m window --swap north

hyper - y: yabai -m window --display next && ~/.config/sketchybar/plugins/space.sh && yabai -m display --focus next && ~/.config/sketchybar/plugins/space.sh
hyper - o: yabai -m window --display prev && ~/.config/sketchybar/plugins/space.sh && yabai -m display --focus prev && ~/.config/sketchybar/plugins/space.sh

hyper - i: yabai -m window --space next && ~/.config/sketchybar/plugins/space.sh && skhd --key "ctrl - right"
hyper - u: yabai -m window --space prev && ~/.config/sketchybar/plugins/space.sh && skhd --key "ctrl - left"
# hyper - i: yabai -m window --space next && yabai -m space --focus next
# hyper - u: yabai -m window --space prev && yabai -m space --focus prev

meh + cmd - space: yabai -m space --balance
meh - r: ~/.config/sketchybar/plugins/space.sh all

# input source
meh - space: ~/.config/sketchybar/plugins/lang.sh

# lalt - s : yabai -m space --create && \
#                   set index "(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space $index && \
#                   yabai -m space --focus "$index"

# lcmd + lalt - h: yabai -m window --warp west
# lcmd + lalt - l: yabai -m window --warp east
# lcmd + lalt - j: yabai -m window --warp south
# lcmd + lalt - k: yabai -m window --warp north


hyper - 1: yabai -m window --space 1 && ~/.config/sketchybar/plugins/space.sh && yabai -m space --focus 1
hyper - 2: yabai -m window --space 2 && ~/.config/sketchybar/plugins/space.sh && yabai -m space --focus 2
hyper - 3: yabai -m window --space 3 && ~/.config/sketchybar/plugins/space.sh && yabai -m space --focus 3
hyper - 4: yabai -m window --space 4 && ~/.config/sketchybar/plugins/space.sh && yabai -m space --focus 4
hyper - 5: yabai -m window --space 5 && ~/.config/sketchybar/plugins/space.sh && yabai -m space --focus 5
hyper - 6: yabai -m window --space 6 && ~/.config/sketchybar/plugins/space.sh && yabai -m space --focus 6
hyper - 7: yabai -m window --space 7 && ~/.config/sketchybar/plugins/space.sh && yabai -m space --focus 7

f12 [
    "IINA": yabai -m display --focus prev || yabai -m display --focus next
    "mpv": yabai -m display --focus prev || yabai -m display --focus next
    "GoldenDict": yabai -m display --focus prev || yabai -m display --focus next
]
